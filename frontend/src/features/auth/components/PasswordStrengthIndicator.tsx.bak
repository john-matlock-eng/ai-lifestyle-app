import React, { useMemo } from 'react';
import { clsx } from 'clsx';

interface PasswordStrengthIndicatorProps {
  password: string;
  onStrengthChange?: (strength: 'weak' | 'medium' | 'strong') => void;
  showRequirements?: boolean;
}

interface PasswordRequirement {
  label: string;
  regex: RegExp;
  met: boolean;
}

export const PasswordStrengthIndicator: React.FC<PasswordStrengthIndicatorProps> = ({
  password,
  onStrengthChange,
  showRequirements = true,
}) => {
  const requirements: PasswordRequirement[] = useMemo(() => {
    return [
      {
        label: 'At least 8 characters',
        regex: /.{8,}/,
        met: password.length >= 8,
      },
      {
        label: 'Contains lowercase letter',
        regex: /[a-z]/,
        met: /[a-z]/.test(password),
      },
      {
        label: 'Contains uppercase letter',
        regex: /[A-Z]/,
        met: /[A-Z]/.test(password),
      },
      {
        label: 'Contains number',
        regex: /[0-9]/,
        met: /[0-9]/.test(password),
      },
      {
        label: 'Contains special character',
        regex: /[^a-zA-Z0-9]/,
        met: /[^a-zA-Z0-9]/.test(password),
      },
    ];
  }, [password]);

  const { strength, score, color } = useMemo(() => {
    const metCount = requirements.filter(req => req.met).length;
    
    let strength: 'weak' | 'medium' | 'strong';
    let color: string;
    
    if (metCount <= 2) {
      strength = 'weak';
      color = 'bg-red-500';
    } else if (metCount <= 4) {
      strength = 'medium';
      color = 'bg-yellow-500';
    } else {
      strength = 'strong';
      color = 'bg-green-500';
    }

    return {
      strength,
      score: (metCount / requirements.length) * 100,
      color,
    };
  }, [requirements]);

  // Notify parent component of strength changes
  React.useEffect(() => {
    if (onStrengthChange && password) {
      onStrengthChange(strength);
    }
  }, [strength, onStrengthChange, password]);

  if (!password) {
    return null;
  }

  return (
    <div className="mt-2 space-y-2">
      {/* Strength Bar */}
      <div className="space-y-1">
        <div className="flex justify-between items-center">
          <span className="text-xs text-muted">Password strength</span>
          <span className={clsx(
            'text-xs font-medium',
            strength === 'weak' && 'text-red-600',
            strength === 'medium' && 'text-yellow-600',
            strength === 'strong' && 'text-green-600'
          )}>
            {strength.charAt(0).toUpperCase() + strength.slice(1)}
          </span>
        </div>
        
        <div className="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
          <div
            className={clsx(
              'h-full transition-all duration-300 ease-out rounded-full',
              color
            )}
            style={{ width: `${score}%` }}
          />
        </div>
      </div>

      {/* Requirements List */}
      {showRequirements && (
        <div className="space-y-1">
          {requirements.map((req, index) => (
            <div
              key={index}
              className={clsx(
                'flex items-center gap-2 text-xs transition-colors duration-200',
                req.met ? 'text-green-600' : 'text-gray-500'
              )}
            >
              <svg
                className="w-3 h-3 flex-shrink-0"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                {req.met ? (
                  <path
                    fillRule="evenodd"
                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                    clipRule="evenodd"
                  />
                ) : (
                  <path
                    fillRule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                    clipRule="evenodd"
                  />
                )}
              </svg>
              <span>{req.label}</span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default PasswordStrengthIndicator;