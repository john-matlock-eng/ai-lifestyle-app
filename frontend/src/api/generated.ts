/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the API
         */
        get: operations["getHealthStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register new user
         * @description Creates a new user account with email and password.
         *     Sends a verification email upon successful registration.
         *
         */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticates user with email and password.
         *     Returns JWT tokens for API access.
         *
         */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Uses refresh token to obtain new access token
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user profile
         * @description Returns the authenticated user's profile information
         */
        get: operations["getUserProfile"];
        /**
         * Update user profile
         * @description Updates the authenticated user's profile information
         */
        put: operations["updateUserProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup 2FA for user
         * @description Generates TOTP secret and QR code for 2FA setup.
         *     User must verify with a code to complete setup.
         *
         */
        post: operations["setupMfa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/verify-setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify 2FA setup
         * @description Confirms 2FA setup with user-provided TOTP code
         */
        post: operations["verifyMfaSetup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify 2FA code during login
         * @description Completes login flow with 2FA verification
         */
        post: operations["verifyMfa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable 2FA
         * @description Removes 2FA from user account after password verification
         */
        post: operations["disableMfa"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password/reset-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request password reset
         * @description Sends password reset email to user
         */
        post: operations["requestPasswordReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password/reset-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm password reset
         * @description Resets password using token from email
         */
        post: operations["confirmPasswordReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify email address
         * @description Confirms email ownership using verification token
         */
        post: operations["verifyEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user goals
         * @description Retrieves all goals for the authenticated user with filtering and pagination.
         *     Supports filtering by status, category, pattern type, and date ranges.
         *
         */
        get: operations["listGoals"];
        put?: never;
        /**
         * Create a new goal
         * @description Creates a new goal for the authenticated user. Supports all 5 goal patterns:
         *     recurring, milestone, target, streak, and limit goals.
         *
         */
        post: operations["createGoal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get goal details
         * @description Retrieves detailed information about a specific goal
         */
        get: operations["getGoal"];
        /**
         * Update goal
         * @description Updates an existing goal. Cannot change goalPattern after creation.
         *     Completed or archived goals cannot be updated.
         *
         */
        put: operations["updateGoal"];
        post?: never;
        /**
         * Archive goal
         * @description Archives a goal. Goals are never hard deleted to preserve history.
         *     Archived goals can be restored later.
         *
         */
        delete: operations["archiveGoal"];
        options?: never;
        head?: never;
        /**
         * Update goal module
         * @description Set or clear module association for a goal
         */
        patch: operations["updateGoalModule"];
        trace?: never;
    };
    "/goals/{goalId}/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List goal activities
         * @description Retrieves activity history for a specific goal with pagination.
         *     Activities include progress logs, completions, and skips.
         *
         */
        get: operations["listGoalActivities"];
        put?: never;
        /**
         * Log goal activity
         * @description Records progress toward a goal. The activity type and validation
         *     depends on the goal pattern (recurring, milestone, etc.).
         *
         */
        post: operations["logGoalActivity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goalId}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get goal progress
         * @description Retrieves current progress and analytics for a goal.
         *     Progress calculation varies by goal pattern.
         *
         */
        get: operations["getGoalProgress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/journal/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get journal statistics */
        get: operations["getJournalStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai-analysis/shares": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create AI analysis share
         * @description Creates a temporary share of selected encrypted entries with the AI analysis service.
         *     Requires explicit user consent and sets appropriate retention periods.
         *
         */
        post: operations["createAIAnalysisShare"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai-analysis/shares/{shareId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get analysis status
         * @description Check the processing status of an AI analysis share
         */
        get: operations["getAnalysisStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai-analysis/results/{shareId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get analysis results
         * @description Retrieve the results of a completed AI analysis
         */
        get: operations["getAnalysisResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai-analysis/shares/{shareId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete analysis share
         * @description Delete an analysis share and all associated data
         */
        delete: operations["deleteAnalysisShare"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai-analysis/public-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get AI service public key
         * @description Retrieve the public key of the AI analysis service for encryption
         */
        get: operations["getAIServicePublicKey"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/encryption/initialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initialize encryption for a module
         * @description Set up encryption context for a specific module (journal, goals, etc)
         */
        post: operations["initializeEncryption"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/encryption/encrypt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Encrypt data
         * @description Encrypt data using the core encryption service
         */
        post: operations["encryptData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/encryption/decrypt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Decrypt data
         * @description Decrypt data using the core encryption service
         */
        post: operations["decryptData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/encryption/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create share token
         * @description Create a temporary share token for encrypted data
         */
        post: operations["createShareToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/encryption/share/{shareToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke share token
         * @description Revoke a previously created share token
         */
        delete: operations["revokeShareToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/encryption/keys/backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Backup encryption keys
         * @description Create an encrypted backup of user's encryption keys
         */
        post: operations["backupKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/encryption/keys/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restore encryption keys
         * @description Restore encryption keys from backup
         */
        post: operations["restoreKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @enum {string} */
            status: "healthy" | "degraded" | "unhealthy";
            /** Format: date-time */
            timestamp: string;
            version: string;
            services?: {
                /** @enum {string} */
                database?: "connected" | "disconnected";
                /** @enum {string} */
                cache?: "connected" | "disconnected";
            };
        };
        ErrorResponse: {
            /** @description Error type/code */
            error: string;
            /** @description Human-readable error message */
            message: string;
            /** @description Additional error details */
            details?: Record<string, never>;
            /** @description Unique request identifier for debugging */
            request_id?: string;
            /** Format: date-time */
            timestamp: string;
        };
        ValidationErrorResponse: {
            /** @enum {string} */
            error: "VALIDATION_ERROR";
            /** @default Validation failed */
            message: string;
            validation_errors: {
                /** @description Field that failed validation */
                field: string;
                /** @description Validation error message */
                message: string;
            }[];
            request_id?: string;
            /** Format: date-time */
            timestamp: string;
        };
        MessageResponse: {
            /** @description Response message */
            message: string;
        };
        RegisterRequest: {
            /**
             * Format: email
             * @description User's email address
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @description Strong password with at least 8 characters
             * @example SecureP@ss123
             */
            password: string;
            /**
             * @description User's first name
             * @example Jane
             */
            firstName: string;
            /**
             * @description User's last name
             * @example Doe
             */
            lastName: string;
        };
        RegisterResponse: {
            /**
             * Format: uuid
             * @description Newly created user ID
             */
            userId: string;
            /**
             * Format: email
             * @description Registered email address
             */
            email: string;
            /**
             * @description Success message
             * @example Registration successful. Please check your email to verify your account.
             */
            message: string;
        };
        LoginRequest: {
            /**
             * Format: email
             * @description User's email address
             */
            email: string;
            /**
             * Format: password
             * @description User's password
             */
            password: string;
        };
        LoginResponse: {
            /** @description JWT access token for API calls */
            accessToken: string;
            /** @description JWT refresh token for getting new access tokens */
            refreshToken: string;
            /**
             * @description Token type for Authorization header
             * @enum {string}
             */
            tokenType: "Bearer";
            /**
             * @description Access token expiration time in seconds
             * @example 3600
             */
            expiresIn: number;
            user: components["schemas"]["UserProfile"];
        };
        RefreshTokenRequest: {
            /** @description Valid refresh token */
            refreshToken: string;
        };
        RefreshTokenResponse: {
            /** @description New JWT access token */
            accessToken: string;
            /** @enum {string} */
            tokenType: "Bearer";
            /** @description Access token expiration time in seconds */
            expiresIn: number;
        };
        PasswordResetRequest: {
            /**
             * Format: email
             * @description User's email address
             */
            email: string;
        };
        PasswordResetConfirm: {
            /** @description Reset token from email */
            token: string;
            /**
             * Format: password
             * @description New password
             */
            newPassword: string;
        };
        EmailVerificationRequest: {
            /** @description Verification token from email */
            token: string;
        };
        MfaSetupResponse: {
            /** @description TOTP secret for manual entry */
            secret: string;
            /** @description Base64 encoded QR code image */
            qrCode: string;
        };
        VerifyMfaSetupRequest: {
            /** @description 6-digit TOTP code */
            code: string;
        };
        MfaStatusResponse: {
            /** @description Whether MFA is enabled */
            enabled: boolean;
        };
        VerifyMfaRequest: {
            /** @description Session token from login response */
            sessionToken: string;
            /** @description 6-digit TOTP code */
            code: string;
        };
        DisableMfaRequest: {
            /**
             * Format: password
             * @description Current password for verification
             */
            password: string;
        };
        UserProfile: {
            /**
             * Format: uuid
             * @description Unique user identifier
             */
            userId: string;
            /**
             * Format: email
             * @description User's email address
             */
            email: string;
            /** @description User's first name */
            firstName: string;
            /** @description User's last name */
            lastName: string;
            /** @description Whether email is verified */
            emailVerified: boolean;
            /**
             * @description Whether 2FA is enabled
             * @default false
             */
            mfaEnabled: boolean;
            /** @description User's phone number (E.164 format) */
            phoneNumber?: string;
            /**
             * Format: date
             * @description User's date of birth
             */
            dateOfBirth?: string;
            /**
             * @description User's timezone (IANA format)
             * @example America/New_York
             */
            timezone?: string;
            preferences?: components["schemas"]["UserPreferences"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateProfileRequest: {
            firstName?: string;
            lastName?: string;
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            timezone?: string;
            preferences?: components["schemas"]["UserPreferences"];
        };
        UserPreferences: {
            /**
             * @description Measurement unit preference
             * @default metric
             * @enum {string}
             */
            units: "metric" | "imperial";
            /**
             * @description Language preference (ISO 639-1)
             * @default en-US
             */
            language: string;
            notifications?: {
                /** @default true */
                email: boolean;
                /** @default true */
                push: boolean;
                /** @default false */
                sms: boolean;
            };
            dietaryRestrictions?: ("vegan" | "vegetarian" | "gluten-free" | "dairy-free" | "nut-free" | "halal" | "kosher")[];
            fitnessGoals?: ("weight-loss" | "muscle-gain" | "endurance" | "flexibility" | "general-health")[];
        };
        Goal: {
            /**
             * Format: uuid
             * @description Unique goal identifier
             */
            goalId: string;
            /**
             * Format: uuid
             * @description Owner of the goal
             */
            userId: string;
            /** @description Goal title */
            title: string;
            /** @description Detailed goal description */
            description?: string;
            /** @description Goal category (fitness, nutrition, wellness, etc.) */
            category: string;
            /** @description Icon identifier for UI */
            icon?: string;
            /** @description Hex color for UI */
            color?: string;
            /**
             * @description Module associated with goal
             * @enum {string|null}
             */
            module?: "journal" | null;
            /**
             * @description Type of goal pattern
             * @enum {string}
             */
            goalPattern: "recurring" | "milestone" | "target" | "streak" | "limit";
            target: components["schemas"]["GoalTarget"];
            schedule?: components["schemas"]["GoalSchedule"];
            progress: components["schemas"]["GoalProgressDetails"];
            context?: components["schemas"]["GoalContext"];
            rewards?: components["schemas"]["GoalRewards"];
            /**
             * @description Current status of the goal
             * @enum {string}
             */
            status: "draft" | "active" | "paused" | "completed" | "archived";
            /**
             * @description Goal visibility setting
             * @default private
             * @enum {string}
             */
            visibility: "private" | "friends" | "public";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /**
             * Format: date-time
             * @description When goal was completed
             */
            completedAt?: string;
            /** @description Additional custom metadata */
            metadata?: {
                [key: string]: unknown;
            };
        };
        CreateGoalRequest: {
            title: string;
            description?: string;
            category: string;
            icon?: string;
            color?: string;
            /** @enum {string} */
            goalPattern: "recurring" | "milestone" | "target" | "streak" | "limit";
            target: components["schemas"]["GoalTarget"];
            schedule?: components["schemas"]["GoalSchedule"];
            context?: components["schemas"]["GoalContext"];
            rewards?: components["schemas"]["GoalRewards"];
            /** @enum {string|null} */
            module?: "journal" | null;
            /**
             * @default private
             * @enum {string}
             */
            visibility: "private" | "friends" | "public";
            metadata?: {
                [key: string]: unknown;
            };
        };
        UpdateGoalRequest: {
            title?: string;
            description?: string;
            category?: string;
            icon?: string;
            color?: string;
            target?: components["schemas"]["GoalTargetUpdate"];
            schedule?: components["schemas"]["GoalSchedule"];
            context?: components["schemas"]["GoalContext"];
            rewards?: components["schemas"]["GoalRewards"];
            /**
             * @description Can only transition between active and paused
             * @enum {string}
             */
            status?: "active" | "paused";
            /** @enum {string} */
            visibility?: "private" | "friends" | "public";
            metadata?: {
                [key: string]: unknown;
            };
        };
        UpdateGoalModuleRequest: {
            /** @enum {string|null} */
            module: "journal" | null;
        };
        GoalTarget: {
            /**
             * @description What to measure
             * @enum {string}
             */
            metric: "count" | "duration" | "amount" | "weight" | "distance" | "calories" | "money" | "custom";
            /** @description The goal value */
            value: number;
            /** @description Unit of measurement (steps, words, pounds, dollars, minutes, etc.) */
            unit: string;
            /**
             * @description For recurring/limit goals
             * @enum {string}
             */
            period?: "day" | "week" | "month" | "quarter" | "year";
            /**
             * Format: date
             * @description For milestone/target goals
             */
            targetDate?: string;
            /** @description Starting point (for tracking progress) */
            startValue?: number;
            /** @description Latest measurement */
            currentValue?: number;
            /**
             * @description Goal direction
             * @enum {string}
             */
            direction: "increase" | "decrease" | "maintain";
            /**
             * @description Type of target
             * @default exact
             * @enum {string}
             */
            targetType: "minimum" | "maximum" | "exact" | "range";
            /** @description For range targets */
            minValue?: number;
            /** @description For range targets */
            maxValue?: number;
        };
        GoalTargetUpdate: {
            value?: number;
            /** Format: date */
            targetDate?: string;
            currentValue?: number;
            minValue?: number;
            maxValue?: number;
        };
        GoalSchedule: {
            /**
             * @description When to work on goal
             * @enum {string}
             */
            frequency?: "daily" | "weekly" | "monthly" | "custom";
            /** @description Days of week (0=Sunday, 6=Saturday) */
            daysOfWeek?: number[];
            /** @description Preferred times in HH:MM format */
            preferredTimes?: string[];
            /**
             * @description How often to check progress
             * @default daily
             * @enum {string}
             */
            checkInFrequency: "daily" | "weekly" | "monthly";
            /** @description Allowed skip days per period */
            allowSkipDays?: number;
            /**
             * @description Can make up missed days
             * @default true
             */
            catchUpAllowed: boolean;
        };
        GoalProgressDetails: {
            /** @description Overall progress percentage */
            percentComplete: number;
            /** Format: date-time */
            lastActivityDate?: string;
            /** @description Value for current period (recurring) */
            currentPeriodValue?: number;
            /** @description Total accumulated (milestone) */
            totalAccumulated?: number;
            /** @description Remaining to reach goal */
            remainingToGoal?: number;
            /** @description Current streak count */
            currentStreak?: number;
            /** @description Longest streak achieved */
            longestStreak?: number;
            /** @description Average value (for limits) */
            averageValue?: number;
            /** @description Days exceeded limit */
            daysOverLimit?: number;
            /** @enum {string} */
            trend: "improving" | "stable" | "declining";
            /**
             * Format: date
             * @description Projected completion date
             */
            projectedCompletion?: string;
            /** @description Success rate percentage */
            successRate: number;
            /** @description Historical period data */
            periodHistory?: components["schemas"]["PeriodHistory"][];
        };
        PeriodHistory: {
            /** @description Period identifier (e.g., "2024-01-20") */
            period: string;
            /** @description Whether goal was achieved */
            achieved: boolean;
            /** @description Value achieved in period */
            value: number;
        };
        GoalContext: {
            /** @description Why this goal matters */
            motivation?: string;
            /** @description Goal importance (1-5) */
            importanceLevel?: number;
            /** @description Goals that help this one */
            supportingGoals?: string[];
            /** @description Goals that compete with this */
            conflictingGoals?: string[];
            /** @description Potential obstacles */
            obstacles?: string[];
            /** @description Success factors */
            successFactors?: string[];
            /** @description Preferred ways to achieve goal */
            preferredActivities?: string[];
            /** @description Activities to avoid */
            avoidActivities?: string[];
        };
        GoalRewards: {
            /**
             * @description Points earned per activity
             * @default 10
             */
            pointsPerActivity: number;
            milestoneRewards?: components["schemas"]["MilestoneReward"][];
            /** @description Earned badges */
            badges?: string[];
        };
        MilestoneReward: {
            /** @description Milestone value */
            value: number;
            /** @description Reward description */
            reward: string;
            /**
             * Format: date-time
             * @description When milestone was unlocked
             */
            unlockedAt?: string;
        };
        GoalListResponse: {
            goals: components["schemas"]["Goal"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GoalActivity: {
            /** Format: uuid */
            activityId: string;
            /** Format: uuid */
            goalId: string;
            /** Format: uuid */
            userId: string;
            /** @description Activity value */
            value: number;
            /** @description Unit of measurement */
            unit: string;
            /** @enum {string} */
            activityType: "progress" | "completed" | "skipped" | "partial";
            /**
             * Format: date
             * @description Date of activity
             */
            activityDate: string;
            /**
             * Format: date-time
             * @description When activity was logged
             */
            loggedAt: string;
            /** @description User's timezone */
            timezone: string;
            location?: components["schemas"]["ActivityLocation"];
            context?: components["schemas"]["ActivityContext"];
            /** @description Activity note */
            note?: string;
            attachments?: components["schemas"]["ActivityAttachment"][];
            /**
             * @default manual
             * @enum {string}
             */
            source: "manual" | "device" | "integration" | "import";
            deviceInfo?: components["schemas"]["DeviceInfo"];
        };
        LogActivityRequest: {
            value: number;
            unit: string;
            /** @enum {string} */
            activityType: "progress" | "completed" | "skipped" | "partial";
            /**
             * Format: date
             * @description Defaults to today if not provided
             */
            activityDate?: string;
            location?: components["schemas"]["ActivityLocation"];
            context?: components["schemas"]["ActivityContext"];
            note?: string;
            attachments?: components["schemas"]["ActivityAttachmentRequest"][];
            /**
             * @default manual
             * @enum {string}
             */
            source: "manual" | "device" | "integration" | "import";
        };
        ActivityLocation: {
            /** @enum {string} */
            type?: "home" | "work" | "gym" | "outdoors" | "travel";
            city?: string;
            /** @description [
             *       "longitude",
             *       "latitude"
             *     ] */
            coordinates?: number[];
        };
        ActivityContext: {
            /** @enum {string} */
            timeOfDay?: "early-morning" | "morning" | "afternoon" | "evening" | "night";
            /** @enum {string} */
            dayOfWeek?: "sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday";
            isWeekend?: boolean;
            isHoliday?: boolean;
            weather?: components["schemas"]["WeatherInfo"];
            energyLevel?: number;
            sleepHours?: number;
            stressLevel?: number;
            withOthers?: boolean;
            /** @enum {string} */
            socialContext?: "alone" | "partner" | "friends" | "group" | "online";
            previousActivity?: string;
            nextActivity?: string;
            /** @description Duration in minutes */
            duration?: number;
            difficulty?: number;
            enjoyment?: number;
            mood?: string;
        };
        WeatherInfo: {
            condition?: string;
            /** @description Temperature in Celsius */
            temperature?: number;
            humidity?: number;
        };
        ActivityAttachment: {
            /** @enum {string} */
            type: "image" | "link" | "reference";
            /** Format: uri */
            url: string;
            /**
             * Format: uuid
             * @description Reference to another entity
             */
            entityId?: string;
        };
        ActivityAttachmentRequest: {
            /** @enum {string} */
            type: "image" | "link" | "reference";
            /**
             * Format: uri
             * @description Required for link type
             */
            url?: string;
            /**
             * Format: uuid
             * @description Required for reference type
             */
            entityId?: string;
        };
        DeviceInfo: {
            type?: string;
            model?: string;
            appVersion?: string;
        };
        GoalActivityListResponse: {
            activities: components["schemas"]["GoalActivity"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GoalProgress: {
            /** Format: uuid */
            goalId: string;
            /** @enum {string} */
            period: "current" | "week" | "month" | "quarter" | "year" | "all";
            progress: components["schemas"]["GoalProgressDetails"];
            statistics: components["schemas"]["GoalStatistics"];
            insights?: components["schemas"]["GoalInsights"];
        };
        GoalStatistics: {
            totalActivities?: number;
            completedActivities?: number;
            skippedActivities?: number;
            averageValue?: number;
            bestValue?: number;
            worstValue?: number;
            /** @description Consistency percentage */
            consistency?: number;
        };
        GoalInsights: {
            /** @enum {string} */
            bestTimeOfDay?: "early-morning" | "morning" | "afternoon" | "evening" | "night";
            /** @enum {string} */
            bestDayOfWeek?: "sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday";
            /** @description Identified success patterns */
            successPatterns?: string[];
            /** @description Personalized recommendations */
            recommendations?: string[];
        };
        PaginationInfo: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
        JournalGoalProgress: {
            /** Format: uuid */
            goalId: string;
            title: string;
            percentComplete: number;
            streak: number;
        };
        JournalStats: {
            totalEntries: number;
            currentStreak: number;
            /** Format: date */
            lastEntryDate: string | null;
            goalProgress: components["schemas"]["JournalGoalProgress"][];
        };
        CreateAIShareRequest: {
            /** @description IDs of entries to analyze */
            entryIds: string[];
            /**
             * @description Type of analysis to perform
             * @enum {string}
             */
            analysisType: "mood" | "patterns" | "goals" | "wellness" | "custom";
            permissions: components["schemas"]["AIAnalysisPermissions"];
            /** @description Analysis-specific parameters */
            parameters?: {
                [key: string]: unknown;
            };
        };
        AIAnalysisPermissions: {
            /**
             * @description How long AI service can retain decrypted data
             * @enum {string}
             */
            retentionPeriod: "ephemeral" | "24h" | "7d" | "30d";
            /**
             * @description Allow analysis across multiple entries
             * @default true
             */
            allowCrossEntryAnalysis: boolean;
            /**
             * @description Allow comparison with user's historical data
             * @default false
             */
            allowHistoricalComparison: boolean;
            /**
             * @description Allow anonymous usage for model improvement
             * @default false
             */
            allowModelTraining: boolean;
            /**
             * @description How the data can be used
             * @enum {string}
             */
            dataUsage: "personal" | "aggregate" | "research";
        };
        AIAnalysisShare: {
            /** @description Unique identifier for this share */
            shareId: string;
            /** @enum {string} */
            status: "pending" | "processing" | "completed" | "failed" | "expired";
            /** @description Estimated seconds until completion */
            estimatedProcessingTime?: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            expiresAt: string;
            /** @description Error message if failed */
            error?: string;
        };
        AnalysisStatus: {
            shareId: string;
            /** @enum {string} */
            status: "pending" | "processing" | "completed" | "failed" | "expired";
            /** @description Processing progress percentage */
            progress: number;
            /** @description Current processing step */
            currentStep?: string;
            /** @description Estimated seconds remaining */
            estimatedTimeRemaining?: number;
        };
        AIAnalysisResult: {
            resultId: string;
            shareId: string;
            insights: {
                /** @description Executive summary of analysis */
                summary: string;
                /** @description Overall confidence score */
                confidence: number;
                findings: components["schemas"]["AnalysisFinding"][];
            };
            patterns?: components["schemas"]["AnalysisPattern"][];
            recommendations?: components["schemas"]["AnalysisRecommendation"][];
            metadata?: {
                analysisVersion?: string;
                processingTime?: number;
                entryCount?: number;
                dateRange?: {
                    /** Format: date */
                    start?: string;
                    /** Format: date */
                    end?: string;
                };
            };
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            validUntil: string;
        };
        AnalysisFinding: {
            type: string;
            description: string;
            /** @description References to support finding */
            evidence?: string[];
            /** @enum {string} */
            strength: "strong" | "moderate" | "weak";
        };
        AnalysisPattern: {
            /** @enum {string} */
            patternType: "temporal" | "behavioral" | "emotional" | "correlation";
            description: string;
            /** @description How often pattern occurs */
            frequency: number;
            /** @description Data for visual representation */
            visualization?: Record<string, never>;
        };
        AnalysisRecommendation: {
            type: string;
            /** @description Recommended action */
            action: string;
            /** @description Why this is recommended */
            rationale: string;
            /** @enum {string} */
            priority: "high" | "medium" | "low";
            /** @description Related goal IDs */
            relatedGoals?: string[];
        };
        AIServicePublicKey: {
            /** @description Base64 encoded public key */
            publicKey: string;
            /** @description Key fingerprint for identification */
            publicKeyId: string;
            /** @enum {string} */
            algorithm: "RSA-OAEP";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            expiresAt?: string;
        };
        InitializeEncryptionRequest: {
            /**
             * @description Module requesting encryption
             * @enum {string}
             */
            moduleId: "journal" | "goals" | "health" | "finance" | "ai-analysis";
            /**
             * @description Level of encryption security
             * @enum {string}
             */
            encryptionLevel: "standard" | "high" | "maximum";
            features?: {
                /** @default true */
                sharing: boolean;
                /** @default false */
                search: boolean;
                /** @default true */
                versioning: boolean;
                /** @default true */
                audit: boolean;
            };
        };
        EncryptionStatus: {
            moduleId: string;
            initialized: boolean;
            /** @description Module's public key for sharing */
            publicKey: string;
            encryptionLevel?: string;
            features?: Record<string, never>;
        };
        EncryptRequest: {
            moduleId: string;
            /** @description Data to encrypt (any JSON object) */
            data: Record<string, never>;
            /** @description Unencrypted metadata */
            metadata?: Record<string, never>;
            options?: {
                /** @default false */
                compression: boolean;
            };
        };
        EncryptedData: {
            /** Format: uuid */
            id: string;
            moduleId: string;
            /** @description Base64 encoded encrypted data */
            ciphertext: string;
            /** @description Base64 encoded initialization vector */
            iv: string;
            /** @default AES-256-GCM */
            algorithm: string;
            /** @description Unencrypted metadata */
            metadata?: Record<string, never>;
            /** Format: date-time */
            createdAt?: string;
        };
        DecryptRequest: {
            encryptedData: components["schemas"]["EncryptedData"];
        };
        DecryptedData: {
            /** @description Decrypted data */
            data: Record<string, never>;
            moduleId: string;
            metadata?: Record<string, never>;
        };
        CreateShareRequest: {
            /** Format: uuid */
            dataId: string;
            /** @description User ID or service ID */
            recipientId: string;
            permissions: {
                actions: ("read" | "write" | "share" | "delete")[];
                /** @description Duration like "24h", "7d", "30d" */
                expiresIn: string;
                /** @default false */
                singleUse: boolean;
            };
        };
        ShareToken: {
            /** Format: uuid */
            token: string;
            dataId: string;
            recipientId?: string;
            permissions?: Record<string, never>;
            /** Format: date-time */
            expiresAt: string;
            /** Format: date-time */
            createdAt?: string;
        };
        BackupKeysRequest: {
            /**
             * Format: password
             * @description Password to encrypt the backup
             */
            password: string;
            /** @description Specific modules to backup */
            includeModules?: string[];
        };
        KeyBackup: {
            /** Format: uuid */
            backupId: string;
            /** @description Base64 encoded encrypted key backup */
            encryptedKeys: string;
            modules?: string[];
            /** Format: date-time */
            createdAt: string;
            checksum?: string;
        };
        RestoreKeysRequest: {
            backup: components["schemas"]["KeyBackup"];
            /** Format: password */
            password: string;
        };
        PaginationParams: {
            /** @default 1 */
            page: number;
            /** @default 20 */
            limit: number;
            /** @example created_at:desc */
            sort?: string;
        };
        PaginatedResponse: {
            data: unknown[];
            pagination: {
                page: number;
                limit: number;
                total: number;
                pages: number;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealthStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponse"];
                };
            };
            /** @description Invalid registration data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Email already registered */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Too many login attempts */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshTokenResponse"];
                };
            };
            /** @description Invalid refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequest"];
            };
        };
        responses: {
            /** @description Profile updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            /** @description Invalid profile data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    setupMfa: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description MFA setup initiated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MfaSetupResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description MFA already enabled */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    verifyMfaSetup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyMfaSetupRequest"];
            };
        };
        responses: {
            /** @description MFA successfully enabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MfaStatusResponse"];
                };
            };
            /** @description Invalid verification code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    verifyMfa: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyMfaRequest"];
            };
        };
        responses: {
            /** @description MFA verification successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Invalid MFA code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Invalid session or expired */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    disableMfa: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DisableMfaRequest"];
            };
        };
        responses: {
            /** @description MFA successfully disabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MfaStatusResponse"];
                };
            };
            /** @description Invalid password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    requestPasswordReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetRequest"];
            };
        };
        responses: {
            /** @description Reset email sent if email exists */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Too many reset attempts */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    confirmPasswordReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetConfirm"];
            };
        };
        responses: {
            /** @description Password successfully reset */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Invalid or expired token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    verifyEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailVerificationRequest"];
            };
        };
        responses: {
            /** @description Email successfully verified */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Invalid or expired token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listGoals: {
        parameters: {
            query?: {
                /** @description Filter by goal status */
                status?: ("draft" | "active" | "paused" | "completed" | "archived")[];
                /** @description Filter by goal pattern type */
                goalPattern?: ("recurring" | "milestone" | "target" | "streak" | "limit")[];
                /** @description Filter by category */
                category?: string[];
                /** @description Filter by module */
                module?: "journal";
                page?: number;
                limit?: number;
                /** @description Sort order */
                sort?: "created_asc" | "created_desc" | "updated_asc" | "updated_desc" | "title_asc" | "title_desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Goals retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoalListResponse"];
                };
            };
            /** @description Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createGoal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGoalRequest"];
            };
        };
        responses: {
            /** @description Goal created successfully */
            201: {
                headers: {
                    /** @description URL of created goal */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
            /** @description Invalid goal data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Business rule violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getGoal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                goalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Goal retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Goal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateGoal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                goalId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGoalRequest"];
            };
        };
        responses: {
            /** @description Goal updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
            /** @description Invalid update data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Goal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Cannot update completed/archived goal */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    archiveGoal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                goalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Goal archived successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Goal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateGoalModule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                goalId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGoalModuleRequest"];
            };
        };
        responses: {
            /** @description Goal updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Goal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listGoalActivities: {
        parameters: {
            query?: {
                /** @description Filter activities after this date */
                startDate?: string;
                /** @description Filter activities before this date */
                endDate?: string;
                /** @description Filter by activity type */
                activityType?: ("progress" | "completed" | "skipped" | "partial")[];
                page?: number;
                limit?: number;
            };
            header?: never;
            path: {
                goalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Activities retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoalActivityListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Goal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    logGoalActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                goalId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogActivityRequest"];
            };
        };
        responses: {
            /** @description Activity logged successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoalActivity"];
                };
            };
            /** @description Invalid activity data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Goal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Activity violates goal rules */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getGoalProgress: {
        parameters: {
            query?: {
                /** @description Time period for progress calculation */
                period?: "current" | "week" | "month" | "quarter" | "year" | "all";
            };
            header?: never;
            path: {
                goalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Progress retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoalProgress"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Goal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getJournalStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stats retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalStats"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createAIAnalysisShare: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAIShareRequest"];
            };
        };
        responses: {
            /** @description Analysis share created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIAnalysisShare"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description User does not own all specified entries */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Analysis quota exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAnalysisStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analysis status retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisStatus"];
                };
            };
            /** @description Share not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAnalysisResults: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analysis results retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIAnalysisResult"];
                };
            };
            /** @description Analysis still processing */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Results not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteAnalysisShare: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Share deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Share not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAIServicePublicKey: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Public key retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIServicePublicKey"];
                };
            };
        };
    };
    initializeEncryption: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InitializeEncryptionRequest"];
            };
        };
        responses: {
            /** @description Encryption initialized successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EncryptionStatus"];
                };
            };
            /** @description Invalid configuration */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    encryptData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EncryptRequest"];
            };
        };
        responses: {
            /** @description Data encrypted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EncryptedData"];
                };
            };
            /** @description Encryption failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    decryptData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DecryptRequest"];
            };
        };
        responses: {
            /** @description Data decrypted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DecryptedData"];
                };
            };
            /** @description Decryption failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createShareToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateShareRequest"];
            };
        };
        responses: {
            /** @description Share token created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareToken"];
                };
            };
            /** @description Not authorized to share this data */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    revokeShareToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Share token revoked */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Share token not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    backupKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BackupKeysRequest"];
            };
        };
        responses: {
            /** @description Keys backed up successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KeyBackup"];
                };
            };
            /** @description Backup failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    restoreKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RestoreKeysRequest"];
            };
        };
        responses: {
            /** @description Keys restored successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Restore failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
