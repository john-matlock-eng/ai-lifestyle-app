name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        working-directory: ./backend
        run: |
          black --check src/ tests/
          isort --check-only src/ tests/
          flake8 src/ tests/
          pylint src/ || true  # Don't fail on pylint warnings

      - name: Run tests
        working-directory: ./backend
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=term-missing

  backend-terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Format Check
        working-directory: ./backend/terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./backend/terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./backend/terraform
        run: terraform validate

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    # Only run if frontend directory exists
    if: hashFiles('frontend/package.json') != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: |
          npm run lint
          npm run format -- --check

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage

      - name: Build
        working-directory: ./frontend
        run: npm run build

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function: [api-handler, health-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.${{ matrix.function }}
          platforms: linux/arm64
          push: false
          tags: test-build:${{ matrix.function }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
