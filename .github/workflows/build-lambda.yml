# DEPRECATED - Use deploy-backend-unified.yml instead
# This workflow is kept for reference but should not be used

name: Build and Deploy Lambda (DEPRECATED)

on:
  workflow_dispatch:  # Only manual trigger for emergency use
    inputs:
      confirm:
        description: 'Type DEPRECATED to confirm you want to use this old workflow'
        required: true
        type: string
      function_name:
        description: 'Lambda function name'
        required: true
        default: 'api-handler'
        type: choice
        options:
          - api-handler
          - health-check
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-east-1

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy Lambda ${{ github.event_name == 'pull_request' && '(dev)' || github.event_name == 'push' && '(prod)' || '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "function_name=${{ github.event.inputs.function_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "function_name=api-handler" >> $GITHUB_OUTPUT
          else
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "function_name=api-handler" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/terraform-deployer-ai-lifestyle
          role-session-name: github-actions-lambda-${{ steps.env.outputs.environment }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR Repository URL
        id: ecr
        run: |
          # Simple approach - construct the ECR URL directly
          ECR_URL="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/lifestyle-app-${{ steps.env.outputs.environment }}"
          
          # Verify the repository exists
          if aws ecr describe-repositories --repository-names "lifestyle-app-${{ steps.env.outputs.environment }}" 2>/dev/null; then
            echo "ECR repository found: lifestyle-app-${{ steps.env.outputs.environment }}"
          else
            echo "Error: ECR repository lifestyle-app-${{ steps.env.outputs.environment }} does not exist."
            echo "Please deploy the infrastructure first using the deploy-backend workflow."
            exit 1
          fi
          
          echo "Using ECR URL: $ECR_URL"
          echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.${{ steps.env.outputs.function_name }}
          platforms: linux/arm64
          push: true
          tags: |
            ${{ steps.ecr.outputs.ecr_url }}:${{ steps.env.outputs.function_name }}-${{ github.sha }}
            ${{ steps.ecr.outputs.ecr_url }}:${{ steps.env.outputs.function_name }}-${{ steps.env.outputs.environment }}-${{ github.sha }}
          build-args: |
            ENVIRONMENT=${{ steps.env.outputs.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update Lambda Function
        id: update_lambda
        run: |
          LAMBDA_NAME="${{ steps.env.outputs.function_name }}-${{ steps.env.outputs.environment }}"
          
          # Check if Lambda exists
          if aws lambda get-function --function-name $LAMBDA_NAME 2>/dev/null; then
            echo "Updating Lambda function $LAMBDA_NAME..."
            aws lambda update-function-code \
              --function-name $LAMBDA_NAME \
              --image-uri ${{ steps.ecr.outputs.ecr_url }}:${{ steps.env.outputs.function_name }}-${{ github.sha }}
            
            # Wait for update to complete
            aws lambda wait function-updated \
              --function-name $LAMBDA_NAME
            
            echo "lambda_updated=true" >> $GITHUB_OUTPUT
          else
            echo "Lambda function $LAMBDA_NAME not found. Deploy infrastructure first."
            echo "lambda_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        run: |
          echo "### Lambda Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Function**: ${{ steps.env.outputs.function_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ steps.env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag**: ${{ steps.env.outputs.function_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.update_lambda.outputs.lambda_updated }}" == "true" ]]; then
            echo "**Status**: ✅ Lambda Updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status**: ⚠️ Image pushed but Lambda not updated (deploy infrastructure first)" >> $GITHUB_STEP_SUMMARY
          fi
