name: Deploy Infrastructure

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.9.8

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required for actions/checkout
  pull-requests: write  # Required for PR comments

jobs:
  # Determine environment based on event type
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi

  # Terraform Plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-terraform-deployer
          role-session-name: github-actions-${{ needs.setup.outputs.environment }}-plan
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.setup.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=${{ needs.setup.outputs.environment }}" \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -out=tfplan \
            -input=false

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ needs.setup.outputs.environment }}-${{ github.sha }}
          path: ./terraform/tfplan
          retention-days: 1

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            
            // Generate plan output
            const planOutput = execSync(
              'terraform show -no-color tfplan', 
              { cwd: './terraform' }
            ).toString();
            
            // Truncate if too long
            const truncatedPlan = planOutput.length > 65000 
              ? planOutput.substring(0, 65000) + '\n\n... (truncated)'
              : planOutput;
            
            const output = `#### Terraform Plan (${{ needs.setup.outputs.environment }}) ðŸ“–
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`
            
            </details>
            
            *Environment*: \`${{ needs.setup.outputs.environment }}\`
            *Triggered by*: @${{ github.actor }}
            *Action*: \`${{ github.event_name }}\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # Terraform Apply (only on main branch)
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [setup, terraform-plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-terraform-role
          role-session-name: github-actions-${{ needs.setup.outputs.environment }}-apply
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false  # Disable wrapper to get raw output

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.setup.outputs.environment }}-${{ github.sha }}
          path: ./terraform

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.setup.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false tfplan

      - name: Get Terraform Outputs
        id: tf_output
        working-directory: ./terraform
        run: |
          echo "bucket_name=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT
          echo "bucket_arn=$(terraform output -raw bucket_arn)" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: âœ… Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket**: ${{ steps.tf_output.outputs.bucket_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Bucket ARN**: ${{ steps.tf_output.outputs.bucket_arn }}" >> $GITHUB_STEP_SUMMARY
