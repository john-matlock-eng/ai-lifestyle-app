name: Deploy Infrastructure

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.9.8

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required for actions/checkout
  pull-requests: write  # Required for PR comments

jobs:
  # Deploy to dev or prod based on trigger
  deploy:
    name: Deploy ${{ github.event_name == 'pull_request' && 'dev' || 'prod' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'pull_request' && 'dev' || 'prod' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/terraform-deployer-ai-lifestyle
          role-session-name: github-actions-${{ steps.env.outputs.environment }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ steps.env.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Format Check
        id: fmt
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=${{ steps.env.outputs.environment }}" \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -out=tfplan \
            -input=false \
            -no-color

      - name: Save Plan Output
        id: show_plan
        if: github.event_name == 'pull_request'
        working-directory: ./terraform
        run: |
          PLAN_OUTPUT=$(terraform show -no-color tfplan)
          echo "plan<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOutput = `${{ steps.show_plan.outputs.plan }}`;
            
            // Truncate if too long
            const truncatedPlan = planOutput.length > 65000 
              ? planOutput.substring(0, 65000) + '\n\n... (truncated)'
              : planOutput;
            
            const output = `#### Terraform Plan (${{ steps.env.outputs.environment }}) üìñ
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`
            
            </details>
            
            *Environment*: \`${{ steps.env.outputs.environment }}\`
            *Triggered by*: @${{ github.actor }}
            *Action*: \`${{ github.event_name }}\`
            
            **Note**: This plan will be automatically applied to the **${{ steps.env.outputs.environment }}** environment.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false tfplan

      - name: Get Terraform Outputs
        id: tf_output
        working-directory: ./terraform
        run: |
          # Get outputs as JSON for reliability
          OUTPUTS=$(terraform output -json)
          
          # Extract individual outputs if they exist
          if [ ! -z "$OUTPUTS" ] && [ "$OUTPUTS" != "{}" ]; then
            echo "bucket_name=$(echo $OUTPUTS | jq -r '.bucket_name.value // empty')" >> $GITHUB_OUTPUT
            echo "bucket_arn=$(echo $OUTPUTS | jq -r '.bucket_arn.value // empty')" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ steps.env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ‚úÖ Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ ! -z "${{ steps.tf_output.outputs.bucket_name }}" ]; then
            echo "**S3 Bucket**: ${{ steps.tf_output.outputs.bucket_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Bucket ARN**: ${{ steps.tf_output.outputs.bucket_arn }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with Deploy Status
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### ‚úÖ Terraform Apply Complete
            
            **Environment**: \`${{ steps.env.outputs.environment }}\`
            ${`${{ steps.tf_output.outputs.bucket_name }}` ? `**S3 Bucket**: \`${{ steps.tf_output.outputs.bucket_name }}\`` : ''}
            
            The infrastructure has been successfully deployed to the **${{ steps.env.outputs.environment }}** environment.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Comment PR with Failure
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### ‚ùå Terraform Deployment Failed
            
            **Environment**: \`${{ steps.env.outputs.environment }}\`
            **Failed Step**: \`${{ steps.init.outcome == 'failure' && 'init' || steps.fmt.outcome == 'failure' && 'format' || steps.validate.outcome == 'failure' && 'validate' || steps.plan.outcome == 'failure' && 'plan' || 'apply' }}\`
            
            Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
